group_by(level, ads_played) %>%
summarise (sum=n() , .groups = 'drop' )
#Keep the same data frame to save memory
train_df <- merge(train_df, session_avg, by=c("userId")) %>%
arrange(userId)
train_df <- merge(train_df, session_avg_length, by=c("userId")) %>%
arrange(userId)
train_df <- merge(train_df, window_home_songs, by=c("userId")) %>%
arrange(userId)
train_df <- merge(train_df, window_ads_songs, by=c("userId")) %>%
arrange(userId)
train_df
ggplot(train_df %>% filter(churn == 1), aes(x = end_level)) +
geom_bar(position = position_dodge()) +
theme_classic() +
labs(x = "level of user",
title = "distribution of level"
)
ggplot(df, aes(x = page)) +
geom_bar() +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))+
labs(x = "user activities",
title = "distribution of user activities(original data)")
ggplot(train_df %>% filter(as.factor(churn)== 1), aes(x=forcats::fct_infreq(location))) +
geom_bar()+
theme_classic() +
theme(axis.text.x = element_text(angle = 90)) +
labs(x = "state",
y = "number of people churned",
title = 'churn by states'
)
ggplot(train_df %>% filter(churn == 1), aes(x = gender))+
geom_bar(na.rm = T) +
theme_classic() +
labs(title = "churn ratio by gender")
correlation = cor(train_df %>% purrr::keep(is.numeric) %>% select(-c(userId)), use = 'pairwise.complete.obs')
corrplot::corrplot(correlation, 'ellipse', type = 'lower',  order = 'hclust')
temp <- train_df %>% select(-c(userId))
temp %>%
purrr::keep(is.numeric) %>%
cbind(churn = as.factor(train_df$churn)) %>%
tidyr::gather("key", "value", - churn, factor_key = T) %>%
ggplot(aes(value, color = churn)) +
facet_wrap(~ key, scales = "free") +
geom_density()
temp <- train_df %>% filter(churn == 1) %>%
slice(rep(1:n(),
round(nrow(filter(train_df, churn == 0))/
nrow(filter(train_df, churn == 1)),0)-1))
train_df2 <- bind_rows(train_df, temp)
model_logi <- glm(churn~.-userId,family = binomial, train_df2)
summary(model_logi)
predicted_class <- ifelse(model_logi$fitted.values>0.5,1,0)
confusion_matrix <- confusionMatrix(as.factor(predicted_class),
train_df2$churn,
mode = "everything",positive = "1")
confusion_matrix
predicted_class <- ifelse(predict(model_logi,train_df,type="response")>0.5,1,0)
confusion_matrix <- confusionMatrix(as.factor(predicted_class),
train_df$churn,
mode = "everything",positive = "1")
confusion_matrix
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(ggplot2)
data <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv")
head(data)
filter_data <- data %>%
filter(Year == 2010)
ggplot(filter_data, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
server <- function(){
renderPlot({hist(rnorm(100))})
}
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths))
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
order_by(sum)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths))
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(sum)
?arrange
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 10)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 10)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 10)
?renderPlot
ui <- fluidPage(
selectInput("cause", label = "Dataset", filter_data.ICD.Chapter)
)
ui <- fluidPage(
selectInput("cause", label = "Dataset", filter_data$ICD.Chapter),
plotOutput("plot")
)
server <- function(input,output){
output$plot <- renderPlot({
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(ggplot2)
data <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv")
filter_data <- data %>%
filter(Year == 2010)
ggplot(filter_data, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 10)
?selectInput
ui <- fluidPage(
selectInput(inputId = "cause", label = "Dataset", choices = filter_data$ICD.Chapter),
plotOutput()
)
?mainPanel
ui <- fluidPage(
selectInput(inputId = "cause", label = "Dataset", choices = filter_data$ICD.Chapter),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
output$plot <- renderPlot({
ggplot(top_deaths, aes(fill = input$cause, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
mainPanel(
plotOutput(outputId = "dfPlot")
)
}
shinyApp(ui, server)
library(plotly)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "cause", label = "Dataset", choices = top_deaths$ICD.Chapter)
),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
output$plot2 <- renderPlot({
ggplot(top_deaths, aes(fill = input$cause, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = "cause", label = "Dataset", choices = top_deaths$ICD.Chapter)
),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
output$plot2 <- renderPlot({
ggplot(top_deaths, aes(fill = input$cause, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = 'cause', label = 'Dataset', choices = top_deaths$ICD.Chapter)
),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
output$plot2 <- renderPlot({
ggplot(top_deaths, aes(fill = input$cause, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = 'cause', label = 'Dataset', choices = top_deaths$ICD.Chapter)
),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
output$plot2 <- renderPlot({
ggplot(filterdf, aes(x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput(inputId = 'cause', label = 'Dataset', choices = unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot2"))
)
server <- function(input,output){
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
output$plot2 <- renderPlot({
ggplot(filterdf, aes(x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlot({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
ggplot(filterdf, aes(x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity')
})
}
shinyApp(ui, server)
plotly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar',
text = y, textposition = 'auto')
plotly(top_deaths, x = State, y = Crude.Rate, type = 'bar',
text = y, textposition = 'auto')
plotly(top_deaths, x = State, y = Crude.Rate, type = 'bar', text = y, textposition = 'auto')
plotly(top_deaths, x = State, y = Crude.Rate, type = 'bar')
fig <- plotly(top_deaths, x = State, y = Crude.Rate, type = 'bar')
plot_ly(top_deaths, x = State, y = Crude.Rate, type = 'bar')
head(top_deaths)
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar')
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="", tickangle = -45))
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"),
margin = list(b=100))
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"),
margin = list(b=200))
?margin
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlot({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPloty({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar')
})
}
shinyApp(ui, server)
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar')
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotlyOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar')
})
}
shinyApp(ui, server)
ui <- fluidPage(
sidebarPanel(
selectInput('cause','Cause of Death', unique(top_deaths$ICD.Chapter))
),
mainPanel(plotlyOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- top_deaths %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
ui <- fluidPage(
headerPanel("2010 Cause of Death by State")
sidebarPanel(
ui <- fluidPage(
headerPanel("2010 Cause of Death by State"),
sidebarPanel(
selectInput('cause','Cause of Death', unique(filter_data$ICD.Chapter))
),
mainPanel(plotlyOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- filter_data %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = {'categoryorder':'category ascending',list(title="State", tickangle = -45)},
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = {'categoryorder':'category ascending'},list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"),
margin = list(b=200))
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"),
margin = list(b=200)) %>%
update_layout(xaxis = {'categoryorder':'total ascending'})
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
xaxis = {'categoryorder':'category ascending'},
yaxis = list(title = "Death Rate"),
margin = list(b=200))
plot_ly(top_deaths, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
xaxis = {'categoryorder':'Crude.Rate ascending'},
yaxis = list(title = "Death Rate"),
margin = list(b=200))
ui <- fluidPage(
headerPanel("2010 Cause of Death by State"),
sidebarPanel(
selectInput('cause','Cause of Death', unique(filter_data$ICD.Chapter))
),
mainPanel(plotlyOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- filter_data %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
runApp('GitHub/DATA608')
shiny::runApp('GitHub/DATA608')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
data <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module3/data/cleaned-cdc-mortality-1999-2010-2.csv")
head(data)
filter_data <- data %>%
filter(Year == 2010)
ggplot(filter_data, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 20)
filter_data %>%
group_by(ICD.Chapter) %>%
summarise(sum = sum(Deaths)) %>%
arrange(desc(sum))
top_deaths <- filter_data%>%
filter(ICD.Chapter %in% c("Diseases of the circulatory system","Neoplasms","Diseases of the respiratory system","External causes of morbidity and mortality","Diseases of the nervous system","Mental and behavioural disorders"))
head(top_deaths)
ggplot(top_deaths, aes(fill = ICD.Chapter, x = State, y = Crude.Rate)) +
geom_bar(position='dodge', stat='identity') +
facet_wrap(~ ICD.Chapter, nrow = 10)
ui <- fluidPage(
headerPanel("2010 Cause of Death by State"),
sidebarPanel(
selectInput('cause','Cause of Death', unique(filter_data$ICD.Chapter))
),
mainPanel(plotlyOutput("plot1"))
)
server <- function(input,output){
output$plot1 <- renderPlotly({
filterdf <- filter_data %>%
filter(ICD.Chapter == input$cause)
plot_ly(filterdf, x = ~State, y = ~Crude.Rate, type = 'bar') %>%
layout(xaxis = list(title="State", tickangle = -45),
yaxis = list(title = "Death Rate"))
})
}
shinyApp(ui, server)
runApp('GitHub/DATA608/Module 3')
